package com.bangcle;

public class PreDataTool {
	static int n_length = 0;

	public static byte[] preDataIn160(byte[] data, String key, byte[] iv) {
		int data_in160[] = {
			0xaa, 0xae, 0xa8, 0xac, 0xab, 0xaf, 0xa9, 0xad, 0xa2, 0xa6, 0xa0, 0xa4, 0xa3, 0xa7, 0xa1, 0xa5, 
		0xea, 0xee, 0xe8, 0xec, 0xeb, 0xef, 0xe9, 0xed, 0xe2, 0xe6, 0xe0, 0xe4, 0xe3, 0xe7, 0xe1, 0xe5, 
		0x8a, 0x8e, 0x88, 0x8c, 0x8b, 0x8f, 0x89, 0x8d, 0x82, 0x86, 0x80, 0x84, 0x83, 0x87, 0x81, 0x85, 
		0xca, 0xce, 0xc8, 0xcc, 0xcb, 0xcf, 0xc9, 0xcd, 0xc2, 0xc6, 0xc0, 0xc4, 0xc3, 0xc7, 0xc1, 0xc5, 
		0xba, 0xbe, 0xb8, 0xbc, 0xbb, 0xbf, 0xb9, 0xbd, 0xb2, 0xb6, 0xb0, 0xb4, 0xb3, 0xb7, 0xb1, 0xb5, 
		0xfa, 0xfe, 0xf8, 0xfc, 0xfb, 0xff, 0xf9, 0xfd, 0xf2, 0xf6, 0xf0, 0xf4, 0xf3, 0xf7, 0xf1, 0xf5, 
		0x9a, 0x9e, 0x98, 0x9c, 0x9b, 0x9f, 0x99, 0x9d, 0x92, 0x96, 0x90, 0x94, 0x93, 0x97, 0x91, 0x95, 
		0xda, 0xde, 0xd8, 0xdc, 0xdb, 0xdf, 0xd9, 0xdd, 0xd2, 0xd6, 0xd0, 0xd4, 0xd3, 0xd7, 0xd1, 0xd5, 
		0x2a, 0x2e, 0x28, 0x2c, 0x2b, 0x2f, 0x29, 0x2d, 0x22, 0x26, 0x20, 0x24, 0x23, 0x27, 0x21, 0x25, 
		0x6a, 0x6e, 0x68, 0x6c, 0x6b, 0x6f, 0x69, 0x6d, 0x62, 0x66, 0x60, 0x64, 0x63, 0x67, 0x61, 0x65, 
		0x0a, 0x0e, 0x08, 0x0c, 0x0b, 0x0f, 0x09, 0x0d, 0x02, 0x06, 0x00, 0x04, 0x03, 0x07, 0x01, 0x05, 
		0x4a, 0x4e, 0x48, 0x4c, 0x4b, 0x4f, 0x49, 0x4d, 0x42, 0x46, 0x40, 0x44, 0x43, 0x47, 0x41, 0x45, 
		0x3a, 0x3e, 0x38, 0x3c, 0x3b, 0x3f, 0x39, 0x3d, 0x32, 0x36, 0x30, 0x34, 0x33, 0x37, 0x31, 0x35, 
		0x7a, 0x7e, 0x78, 0x7c, 0x7b, 0x7f, 0x79, 0x7d, 0x72, 0x76, 0x70, 0x74, 0x73, 0x77, 0x71, 0x75, 
		0x1a, 0x1e, 0x18, 0x1c, 0x1b, 0x1f, 0x19, 0x1d, 0x12, 0x16, 0x10, 0x14, 0x13, 0x17, 0x11, 0x15, 
		0x5a, 0x5e, 0x58, 0x5c, 0x5b, 0x5f, 0x59, 0x5d, 0x52, 0x56, 0x50, 0x54, 0x53, 0x57, 0x51, 0x55
		};
		int data_iv160[] = {
			0x00, 0x04, 0x02, 0x06, 0x01, 0x05, 0x03, 0x07, 0x08, 0x0c, 0x0a, 0x0e, 0x09, 0x0d, 0x0b, 0x0f, 
		0x40, 0x44, 0x42, 0x46, 0x41, 0x45, 0x43, 0x47, 0x48, 0x4c, 0x4a, 0x4e, 0x49, 0x4d, 0x4b, 0x4f, 
		0x20, 0x24, 0x22, 0x26, 0x21, 0x25, 0x23, 0x27, 0x28, 0x2c, 0x2a, 0x2e, 0x29, 0x2d, 0x2b, 0x2f, 
		0x60, 0x64, 0x62, 0x66, 0x61, 0x65, 0x63, 0x67, 0x68, 0x6c, 0x6a, 0x6e, 0x69, 0x6d, 0x6b, 0x6f, 
		0x10, 0x14, 0x12, 0x16, 0x11, 0x15, 0x13, 0x17, 0x18, 0x1c, 0x1a, 0x1e, 0x19, 0x1d, 0x1b, 0x1f, 
		0x50, 0x54, 0x52, 0x56, 0x51, 0x55, 0x53, 0x57, 0x58, 0x5c, 0x5a, 0x5e, 0x59, 0x5d, 0x5b, 0x5f, 
		0x30, 0x34, 0x32, 0x36, 0x31, 0x35, 0x33, 0x37, 0x38, 0x3c, 0x3a, 0x3e, 0x39, 0x3d, 0x3b, 0x3f, 
		0x70, 0x74, 0x72, 0x76, 0x71, 0x75, 0x73, 0x77, 0x78, 0x7c, 0x7a, 0x7e, 0x79, 0x7d, 0x7b, 0x7f, 
		0x80, 0x84, 0x82, 0x86, 0x81, 0x85, 0x83, 0x87, 0x88, 0x8c, 0x8a, 0x8e, 0x89, 0x8d, 0x8b, 0x8f, 
		0xc0, 0xc4, 0xc2, 0xc6, 0xc1, 0xc5, 0xc3, 0xc7, 0xc8, 0xcc, 0xca, 0xce, 0xc9, 0xcd, 0xcb, 0xcf, 
		0xa0, 0xa4, 0xa2, 0xa6, 0xa1, 0xa5, 0xa3, 0xa7, 0xa8, 0xac, 0xaa, 0xae, 0xa9, 0xad, 0xab, 0xaf, 
		0xe0, 0xe4, 0xe2, 0xe6, 0xe1, 0xe5, 0xe3, 0xe7, 0xe8, 0xec, 0xea, 0xee, 0xe9, 0xed, 0xeb, 0xef, 
		0x90, 0x94, 0x92, 0x96, 0x91, 0x95, 0x93, 0x97, 0x98, 0x9c, 0x9a, 0x9e, 0x99, 0x9d, 0x9b, 0x9f, 
		0xd0, 0xd4, 0xd2, 0xd6, 0xd1, 0xd5, 0xd3, 0xd7, 0xd8, 0xdc, 0xda, 0xde, 0xd9, 0xdd, 0xdb, 0xdf, 
		0xb0, 0xb4, 0xb2, 0xb6, 0xb1, 0xb5, 0xb3, 0xb7, 0xb8, 0xbc, 0xba, 0xbe, 0xb9, 0xbd, 0xbb, 0xbf, 
		0xf0, 0xf4, 0xf2, 0xf6, 0xf1, 0xf5, 0xf3, 0xf7, 0xf8, 0xfc, 0xfa, 0xfe, 0xf9, 0xfd, 0xfb, 0xff
		};
		int len = data.length;
		byte[] data_s = new byte[len];
		for (int i = 0; i < len; i++) {
			if (data[i] < 0 ) {
				data_s[i] = (byte) (data_in160[data[i] + 256]);
			} else {
				data_s[i] = (byte) (data_in160[data[i]]);
			}
		}
		if (null != iv) {
			for (int k = 0; k < 16; k++) {
				if (iv[k] < 0) {
					iv[k] = (byte) (data_iv160[iv[k] + 256]);
				} else {
					iv[k] = (byte) (data_iv160[iv[k]]);
				}
			}
		}
		return data_s;
	}

	public static byte[] preDataOut160(byte[] data, String key, byte[] iv) {
		int data_out160[] = {
			0x00, 0x04, 0x02, 0x06, 0x01, 0x05, 0x03, 0x07, 0x08, 0x0c, 0x0a, 0x0e, 0x09, 0x0d, 0x0b, 0x0f, 
		0x40, 0x44, 0x42, 0x46, 0x41, 0x45, 0x43, 0x47, 0x48, 0x4c, 0x4a, 0x4e, 0x49, 0x4d, 0x4b, 0x4f, 
		0x20, 0x24, 0x22, 0x26, 0x21, 0x25, 0x23, 0x27, 0x28, 0x2c, 0x2a, 0x2e, 0x29, 0x2d, 0x2b, 0x2f, 
		0x60, 0x64, 0x62, 0x66, 0x61, 0x65, 0x63, 0x67, 0x68, 0x6c, 0x6a, 0x6e, 0x69, 0x6d, 0x6b, 0x6f, 
		0x10, 0x14, 0x12, 0x16, 0x11, 0x15, 0x13, 0x17, 0x18, 0x1c, 0x1a, 0x1e, 0x19, 0x1d, 0x1b, 0x1f, 
		0x50, 0x54, 0x52, 0x56, 0x51, 0x55, 0x53, 0x57, 0x58, 0x5c, 0x5a, 0x5e, 0x59, 0x5d, 0x5b, 0x5f, 
		0x30, 0x34, 0x32, 0x36, 0x31, 0x35, 0x33, 0x37, 0x38, 0x3c, 0x3a, 0x3e, 0x39, 0x3d, 0x3b, 0x3f, 
		0x70, 0x74, 0x72, 0x76, 0x71, 0x75, 0x73, 0x77, 0x78, 0x7c, 0x7a, 0x7e, 0x79, 0x7d, 0x7b, 0x7f, 
		0x80, 0x84, 0x82, 0x86, 0x81, 0x85, 0x83, 0x87, 0x88, 0x8c, 0x8a, 0x8e, 0x89, 0x8d, 0x8b, 0x8f, 
		0xc0, 0xc4, 0xc2, 0xc6, 0xc1, 0xc5, 0xc3, 0xc7, 0xc8, 0xcc, 0xca, 0xce, 0xc9, 0xcd, 0xcb, 0xcf, 
		0xa0, 0xa4, 0xa2, 0xa6, 0xa1, 0xa5, 0xa3, 0xa7, 0xa8, 0xac, 0xaa, 0xae, 0xa9, 0xad, 0xab, 0xaf, 
		0xe0, 0xe4, 0xe2, 0xe6, 0xe1, 0xe5, 0xe3, 0xe7, 0xe8, 0xec, 0xea, 0xee, 0xe9, 0xed, 0xeb, 0xef, 
		0x90, 0x94, 0x92, 0x96, 0x91, 0x95, 0x93, 0x97, 0x98, 0x9c, 0x9a, 0x9e, 0x99, 0x9d, 0x9b, 0x9f, 
		0xd0, 0xd4, 0xd2, 0xd6, 0xd1, 0xd5, 0xd3, 0xd7, 0xd8, 0xdc, 0xda, 0xde, 0xd9, 0xdd, 0xdb, 0xdf, 
		0xb0, 0xb4, 0xb2, 0xb6, 0xb1, 0xb5, 0xb3, 0xb7, 0xb8, 0xbc, 0xba, 0xbe, 0xb9, 0xbd, 0xbb, 0xbf, 
		0xf0, 0xf4, 0xf2, 0xf6, 0xf1, 0xf5, 0xf3, 0xf7, 0xf8, 0xfc, 0xfa, 0xfe, 0xf9, 0xfd, 0xfb, 0xff
		};
		int len = data.length;
		byte[] data_s = new byte[len];
		for(int i = 0; i < len; i++) {
			if (data[i] < 0 ) {
				data_s[i] = (byte) (data_out160[data[i] + 256]);
			} else {
				data_s[i] = (byte) (data_out160[data[i]]);
			}
		}
		return data_s;
	}

	public static byte[] preDataIn161(byte[] data, String key, byte[] iv) {
		int data_in161[] = {
			0x00, 0x04, 0x08, 0x0c, 0x01, 0x05, 0x09, 0x0d, 0x02, 0x06, 0x0a, 0x0e, 0x03, 0x07, 0x0b, 0x0f, 
		0x40, 0x44, 0x48, 0x4c, 0x41, 0x45, 0x49, 0x4d, 0x42, 0x46, 0x4a, 0x4e, 0x43, 0x47, 0x4b, 0x4f, 
		0x80, 0x84, 0x88, 0x8c, 0x81, 0x85, 0x89, 0x8d, 0x82, 0x86, 0x8a, 0x8e, 0x83, 0x87, 0x8b, 0x8f, 
		0xc0, 0xc4, 0xc8, 0xcc, 0xc1, 0xc5, 0xc9, 0xcd, 0xc2, 0xc6, 0xca, 0xce, 0xc3, 0xc7, 0xcb, 0xcf, 
		0x10, 0x14, 0x18, 0x1c, 0x11, 0x15, 0x19, 0x1d, 0x12, 0x16, 0x1a, 0x1e, 0x13, 0x17, 0x1b, 0x1f, 
		0x50, 0x54, 0x58, 0x5c, 0x51, 0x55, 0x59, 0x5d, 0x52, 0x56, 0x5a, 0x5e, 0x53, 0x57, 0x5b, 0x5f, 
		0x90, 0x94, 0x98, 0x9c, 0x91, 0x95, 0x99, 0x9d, 0x92, 0x96, 0x9a, 0x9e, 0x93, 0x97, 0x9b, 0x9f, 
		0xd0, 0xd4, 0xd8, 0xdc, 0xd1, 0xd5, 0xd9, 0xdd, 0xd2, 0xd6, 0xda, 0xde, 0xd3, 0xd7, 0xdb, 0xdf, 
		0x20, 0x24, 0x28, 0x2c, 0x21, 0x25, 0x29, 0x2d, 0x22, 0x26, 0x2a, 0x2e, 0x23, 0x27, 0x2b, 0x2f, 
		0x60, 0x64, 0x68, 0x6c, 0x61, 0x65, 0x69, 0x6d, 0x62, 0x66, 0x6a, 0x6e, 0x63, 0x67, 0x6b, 0x6f, 
		0xa0, 0xa4, 0xa8, 0xac, 0xa1, 0xa5, 0xa9, 0xad, 0xa2, 0xa6, 0xaa, 0xae, 0xa3, 0xa7, 0xab, 0xaf, 
		0xe0, 0xe4, 0xe8, 0xec, 0xe1, 0xe5, 0xe9, 0xed, 0xe2, 0xe6, 0xea, 0xee, 0xe3, 0xe7, 0xeb, 0xef, 
		0x30, 0x34, 0x38, 0x3c, 0x31, 0x35, 0x39, 0x3d, 0x32, 0x36, 0x3a, 0x3e, 0x33, 0x37, 0x3b, 0x3f, 
		0x70, 0x74, 0x78, 0x7c, 0x71, 0x75, 0x79, 0x7d, 0x72, 0x76, 0x7a, 0x7e, 0x73, 0x77, 0x7b, 0x7f, 
		0xb0, 0xb4, 0xb8, 0xbc, 0xb1, 0xb5, 0xb9, 0xbd, 0xb2, 0xb6, 0xba, 0xbe, 0xb3, 0xb7, 0xbb, 0xbf, 
		0xf0, 0xf4, 0xf8, 0xfc, 0xf1, 0xf5, 0xf9, 0xfd, 0xf2, 0xf6, 0xfa, 0xfe, 0xf3, 0xf7, 0xfb, 0xff
		};
		int data_iv161[] = {
			0x00, 0x04, 0x08, 0x0c, 0x01, 0x05, 0x09, 0x0d, 0x02, 0x06, 0x0a, 0x0e, 0x03, 0x07, 0x0b, 0x0f, 
		0x40, 0x44, 0x48, 0x4c, 0x41, 0x45, 0x49, 0x4d, 0x42, 0x46, 0x4a, 0x4e, 0x43, 0x47, 0x4b, 0x4f, 
		0x80, 0x84, 0x88, 0x8c, 0x81, 0x85, 0x89, 0x8d, 0x82, 0x86, 0x8a, 0x8e, 0x83, 0x87, 0x8b, 0x8f, 
		0xc0, 0xc4, 0xc8, 0xcc, 0xc1, 0xc5, 0xc9, 0xcd, 0xc2, 0xc6, 0xca, 0xce, 0xc3, 0xc7, 0xcb, 0xcf, 
		0x10, 0x14, 0x18, 0x1c, 0x11, 0x15, 0x19, 0x1d, 0x12, 0x16, 0x1a, 0x1e, 0x13, 0x17, 0x1b, 0x1f, 
		0x50, 0x54, 0x58, 0x5c, 0x51, 0x55, 0x59, 0x5d, 0x52, 0x56, 0x5a, 0x5e, 0x53, 0x57, 0x5b, 0x5f, 
		0x90, 0x94, 0x98, 0x9c, 0x91, 0x95, 0x99, 0x9d, 0x92, 0x96, 0x9a, 0x9e, 0x93, 0x97, 0x9b, 0x9f, 
		0xd0, 0xd4, 0xd8, 0xdc, 0xd1, 0xd5, 0xd9, 0xdd, 0xd2, 0xd6, 0xda, 0xde, 0xd3, 0xd7, 0xdb, 0xdf, 
		0x20, 0x24, 0x28, 0x2c, 0x21, 0x25, 0x29, 0x2d, 0x22, 0x26, 0x2a, 0x2e, 0x23, 0x27, 0x2b, 0x2f, 
		0x60, 0x64, 0x68, 0x6c, 0x61, 0x65, 0x69, 0x6d, 0x62, 0x66, 0x6a, 0x6e, 0x63, 0x67, 0x6b, 0x6f, 
		0xa0, 0xa4, 0xa8, 0xac, 0xa1, 0xa5, 0xa9, 0xad, 0xa2, 0xa6, 0xaa, 0xae, 0xa3, 0xa7, 0xab, 0xaf, 
		0xe0, 0xe4, 0xe8, 0xec, 0xe1, 0xe5, 0xe9, 0xed, 0xe2, 0xe6, 0xea, 0xee, 0xe3, 0xe7, 0xeb, 0xef, 
		0x30, 0x34, 0x38, 0x3c, 0x31, 0x35, 0x39, 0x3d, 0x32, 0x36, 0x3a, 0x3e, 0x33, 0x37, 0x3b, 0x3f, 
		0x70, 0x74, 0x78, 0x7c, 0x71, 0x75, 0x79, 0x7d, 0x72, 0x76, 0x7a, 0x7e, 0x73, 0x77, 0x7b, 0x7f, 
		0xb0, 0xb4, 0xb8, 0xbc, 0xb1, 0xb5, 0xb9, 0xbd, 0xb2, 0xb6, 0xba, 0xbe, 0xb3, 0xb7, 0xbb, 0xbf, 
		0xf0, 0xf4, 0xf8, 0xfc, 0xf1, 0xf5, 0xf9, 0xfd, 0xf2, 0xf6, 0xfa, 0xfe, 0xf3, 0xf7, 0xfb, 0xff
		};
		int len = data.length;
		n_length = len;
		byte[] data_s = new byte[len + 256];
		for(int i = 0; i < len; i++) {
			if (data[i] < 0 ) {
				data_s[i] = (byte) (data_in161[data[i] + 256]);
			} else {
				data_s[i] = (byte) (data_in161[data[i]]);
			}
		}
		for (int j = 0; j < 256; j++) {
			data_s[len + j] = 0x00;
		}
		if (null != iv) {
			for (int k = 0; k < 16; k++) {
				if (iv[k] < 0) {
					iv[k] = (byte) (data_iv161[iv[k] + 256]);
				} else {
					iv[k] = (byte) (data_iv161[iv[k]]);
				}
			}
		}
		return data_s;
	}

	public static byte[] preDataOut161(byte[] data, String key, byte[] iv) {
		int data_out161[] = {
			0xdd, 0xd9, 0xd5, 0xd1, 0xdc, 0xd8, 0xd4, 0xd0, 0xdf, 0xdb, 0xd7, 0xd3, 0xde, 0xda, 0xd6, 0xd2, 
		0x9d, 0x99, 0x95, 0x91, 0x9c, 0x98, 0x94, 0x90, 0x9f, 0x9b, 0x97, 0x93, 0x9e, 0x9a, 0x96, 0x92, 
		0x5d, 0x59, 0x55, 0x51, 0x5c, 0x58, 0x54, 0x50, 0x5f, 0x5b, 0x57, 0x53, 0x5e, 0x5a, 0x56, 0x52, 
		0x1d, 0x19, 0x15, 0x11, 0x1c, 0x18, 0x14, 0x10, 0x1f, 0x1b, 0x17, 0x13, 0x1e, 0x1a, 0x16, 0x12, 
		0xcd, 0xc9, 0xc5, 0xc1, 0xcc, 0xc8, 0xc4, 0xc0, 0xcf, 0xcb, 0xc7, 0xc3, 0xce, 0xca, 0xc6, 0xc2, 
		0x8d, 0x89, 0x85, 0x81, 0x8c, 0x88, 0x84, 0x80, 0x8f, 0x8b, 0x87, 0x83, 0x8e, 0x8a, 0x86, 0x82, 
		0x4d, 0x49, 0x45, 0x41, 0x4c, 0x48, 0x44, 0x40, 0x4f, 0x4b, 0x47, 0x43, 0x4e, 0x4a, 0x46, 0x42, 
		0x0d, 0x09, 0x05, 0x01, 0x0c, 0x08, 0x04, 0x00, 0x0f, 0x0b, 0x07, 0x03, 0x0e, 0x0a, 0x06, 0x02, 
		0xfd, 0xf9, 0xf5, 0xf1, 0xfc, 0xf8, 0xf4, 0xf0, 0xff, 0xfb, 0xf7, 0xf3, 0xfe, 0xfa, 0xf6, 0xf2, 
		0xbd, 0xb9, 0xb5, 0xb1, 0xbc, 0xb8, 0xb4, 0xb0, 0xbf, 0xbb, 0xb7, 0xb3, 0xbe, 0xba, 0xb6, 0xb2, 
		0x7d, 0x79, 0x75, 0x71, 0x7c, 0x78, 0x74, 0x70, 0x7f, 0x7b, 0x77, 0x73, 0x7e, 0x7a, 0x76, 0x72, 
		0x3d, 0x39, 0x35, 0x31, 0x3c, 0x38, 0x34, 0x30, 0x3f, 0x3b, 0x37, 0x33, 0x3e, 0x3a, 0x36, 0x32, 
		0xed, 0xe9, 0xe5, 0xe1, 0xec, 0xe8, 0xe4, 0xe0, 0xef, 0xeb, 0xe7, 0xe3, 0xee, 0xea, 0xe6, 0xe2, 
		0xad, 0xa9, 0xa5, 0xa1, 0xac, 0xa8, 0xa4, 0xa0, 0xaf, 0xab, 0xa7, 0xa3, 0xae, 0xaa, 0xa6, 0xa2, 
		0x6d, 0x69, 0x65, 0x61, 0x6c, 0x68, 0x64, 0x60, 0x6f, 0x6b, 0x67, 0x63, 0x6e, 0x6a, 0x66, 0x62, 
		0x2d, 0x29, 0x25, 0x21, 0x2c, 0x28, 0x24, 0x20, 0x2f, 0x2b, 0x27, 0x23, 0x2e, 0x2a, 0x26, 0x22
		};
		if (null == data) {
            return null;
        }
		byte[] data_s = new byte[n_length];
		for(int i = 0; i < n_length; i++) {
			if (data[i] < 0 ) {
				data_s[i] = (byte) (data_out161[data[i] + 256]);
			} else {
				data_s[i] = (byte) (data_out161[data[i]]);
			}
		}
		int index = data_s[n_length - 1] > 0 ? data_s[n_length - 1] : data_s[n_length - 1] + 256;
        int n_out = n_length > index ? n_length - index : n_length;
        byte[] data_out = new byte[n_out];
		for (int j = 0; j < n_out; j++) {
			data_out[j] = data_s[j];
		}
		return data_out;
	}

}
